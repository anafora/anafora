Section 2 - L1

Conceptual aside : concepts that are core to understand the course

  1. syntax parsers,
  2. execution contexts and
  3. lexical environments


    1. Syntax parsers,

        a program that reads your code and determines what it does and if its grammar is valid.
        (--- ;, {, ) missing ---). If the parser says it;s okay then compiler compiles.

        it is a part of compiler.

        "on after the parenthesis, there must be function!"

    2. Lexical Environment: where something sits physically in the code you write
                            // just to make sure the variables exist or not.

                ex) var foo;
                    foo = 5;
                    bar = 10; //???

                    function calc(a, b) {
                        var a = 10;
                        var b = 15;
                        var c = sum(a, b);
                        //where is sum? >> this is where lexical environment comes.
                    }

        "lexical means having to do with words or grammar".
        A lexical environment exists in programming languages in which where you write something is important.

        variable sits lexically inside a function.
        this is important because compilers care about where things are located.

        function hello() {
            console.log(a);
            var a = 'hello world'
        }

        // this function will not work.


    3. Execution context: a wrapper to help manage the code that is running.
                          // sequence of the code.

                    *wrapper: wrapper function is a subroutine in a software library or a computer program whose main
                    purpose is to call a second subroutine or a system call with little or no additional computation.

        There are lots of lexical environments. Which one is currently running is managed via execution contexts.
        It can contain things beyond what you've written in your code.

        function calc() {
            var a = 10;     //1
            var b = 15;     //2
            var c = sum(a, b);//3
            console.log(c);     //5

        }

        function sum(a, b) {        //4
            return a + b;

        }





Section 2 - L7

Conceptual Aside: Name/value pairs and objects

    Name/Value Pair: a name which maps to a unique value

        The name may be defined more than once, but only can have one value in any given context(execution context).
        That value may be more name/value pairs

        ex)
            Address = '100 Main St.' Name/ value

        Object: a collection of name value pairs(javascript);
        ex)
            Name
                name
                    name/value
                    name/value
                    name/value

            Address:
                {
                    street: 'main',
                    number: 100,
                    apartment:
                        {
                            floor: 3,
                            number: 101
                        }
                }

            //collection of number and value pairs.


Section 2 - L8

The global environment and the global object

Basic execution context is the global execution context.
    Here, global object and 'this' (special variable)
          (collection of name and value pairs)

                javascript engine creates "global object" and "this"(variable);
                When the code is empty, "this" means the browser window.
                global object means the window. Each tab has its own object.

    At the global level,
      Global Object(window) = "this";

          // Global:"Not inside a function";

    when you write global variables or functions, they will be assigned inside the "Global Object", which is window.

    ex)
        window with no code vs window with some code(global variable) in console;

            var a = "hello World"
            a = window.a

    When you run a code,
        Execution Context is created.
            Global Object, 'this', and Outer Environment(a link to the outer environment).
              // JS Engine creates for you. Not created by yourself.
            and then your code is run.






Creating and Hoisting

    var a = 'hello world';

    functino b() {
        console.log('called b!');
    }

    b();
    console.log(a);


    b();
    console.log(a);

    function b() {
        console.log('called b!');
    }

    >> result:  called b! and undefined(from a because a is defined later than console.log) >>> HOISTING!


execution context is created in two phases: creation phase and execution phase

1. creation phase

    global object, this, outer environment. // parser runs
    Setup Memory Space for Variables and Functions "Hoisting"
    (just allocating memory space with variables and function names - A or whatever names. Until the specific line is
    executed by the compiler, the space only has a name but no value. Therefore, "undefined")

    all variables are set as "undefined" initially.

    *Javascript and undefined

            ex)
            var a;
            console.log(a); >> undefined

            if(a === undefined) {
                console.log('a is undefined!');

            }
            else {
                console.log('a is defined!');
            }


            if a was declared with value, then 'else' will be executed




2. execution phase: code execution

    Global Object, this, outer environment

    Run your code


Single threaded, synchronous execution

    single threaded: one command at a time(in order). *maybe under the hood of the browser, not.
    ex) browser with JS, flash, service x >> multiple services.

    However once js runs, it is a single thread.

Function Invocation and the Execution stack

    invocation: running a function(calling)
        in Javascript, by using parenthesis()

        every function creates a new execution context


 Functions, Context, and Variable environments

    variable environment: where the variables live

    function b() {
        var myVar;
    }

    function a() {
        var myVar = 2;
        b();
    }

    myVar = 1;
    a();
Asynchronous execution

The Browser
    rendering engine <-> JS engine <> HTTP Request









