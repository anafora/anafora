Lecture 45: framework aside: iifes and safe code

var greeting =

Understanding closures

function greet(whattosay) {
    return function(name) {
        console.log(whattosay + ' ' + name);

    }

}// function that returns a function as the function is an object to be returned as a value
greet('Hi')('Tony');

var sayHi = greet('Hi');
sayHi('Tony');
// still works

how does the sayHi function know 'whattosay' variable?
because whattosay variable was created here when this greet function was called.
>> closures

garbage collection: clears up unnecessary variables in the memory space

closure: phenomenon of closing in all the variables that it is suppsoed to have access to
to make the scope intact
javascript engines create closures

understanding closures 2


function buildFunction() {

    var arr = [];
    for (var i = 0; i < 3; i++) {
        arr.push(
            function() {
                console.log(i);
            }  //function does not run until its called. thats why it is not 0,1,2 but 3!
        );

    }

}

var fs = buildFunctions2();
fs[0]();
fs[1]();
fs[2]();

free variables: varialge that is outside a function that you can access to

what if want to make it show 0,1,2 not 3 all the time?

with 'let' ES6

function buildFunction() {

    var arr = [];
    for (var i = 0; i < 3; i++) {
        let j = i;
        arr.push(
            function() {
                console.log(j);
            }  //function does not run until its called. thats why it is not 0,1,2 but 3!
        );

    }

}

var fs = buildFunctions();
fs[0]();
fs[1]();
fs[2]();


function buildFunction() {

    var arr = [];
    for (var i = 0; i < 3; i++) {
        arr.push(
            (function(j) {
                return function() {
                    console.log(j);
                }
            }(i))
            }
        );

    }

}

var fs = buildFunctions();
fs[0]();
fs[1]();
fs[2]();

Framework aside

functino factories

functino makGreeting(language) {

    return functino (firstname, lastname) {

        if (language === 'en') {
            console.log('Hello' + firstname + ' ' + lastname);
        }

        if (language === 'es') {
            console.log('Hola' + firstname + ' ' + lastname);
        }

    }

}

var greetEnglish = makeGreeting('en');
var greetSpanish = makeGreeting('es');

greetEnglish('John', 'Doe');
greetSpanish('John', 'Doe');

//dont have to create
//create functinos that have some parameters by default by using closures.
//creating functino using functions



closures and callbacks


function sayHiLater() {
    var greeting = 'Hi';

    setTimeout(function() {
        console.log(greeting);
    }, 3000);
}

sayHiLater();


// jQuery uses function expressions and first-class functions!

$("button").click(function() {


});

callback function:
    a function you give to another function, to be run when the other function is finished.
    so the function you call(invoke), 'calls back' by calling trhe function you gave it when it finishes


function tellMeWhenDone(callback) {

    var a = 1000;
    var b = 2000;

    callback();

}

tellMeWhenDone(function() {
    console.log('I am done!');

});


tellMeWhenDone(function() {
    alert('I am done!');
});



처방전
환급받고자하는 계좌번호 예금주성함 은행이름 약상자 오른쪽옆에 뚜껑쪽 제조번호 일련번호

사진찍어서 문자로
1666 9697



call(), apply(), bind()

    function = name + code + // function is an object that can have properties
               call() + apply() + bind() // function's own properties


these properties have to do with 'this'

var person = {
    firstname: 'John',
    lastname: 'Doe',
    getFullName: function() {
        var fullname = this.firstname + ' ' + this.lastname;
        return fullname;
    }
}

var logName = function(lang1, lang2) {
    console.log('Logged: ' + this.getFullName());
}

var logPersonName = logName.bind(person); // not invoking the function logName().bind X


logName(); // undefined function

