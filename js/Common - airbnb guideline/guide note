Object

    Use the literal syntax for object creation.

        // bad
        var item = new Object();

        // good
        var item = {};

    Don't use reserved words as keys. It won't work in IE8.

        // bad
        var superman = {
          default: { clark: 'kent' },
          private: true
        };

        // good
        var superman = {
          defaults: { clark: 'kent' },
          hidden: true
        };

    Use readable synonyms in place of reserved words.

        // bad
        var superman = {
          klass: 'alien'
        };

        // good
        var superman = {
          type: 'alien'
        };

Array

    Use the literal syntax for array creation.

        // good
        var items = [];

    Use Array#push instead of direct assignment to add items to an array.

        var someStack = [];


        // bad
        someStack[someStack.length] = 'abracadabra';

        // good
        someStack.push('abracadabra');

    When you need to copy an array use Array#slice.

        var len = items.length;
        var itemsCopy = [];
        var i;

        // bad
        for (i = 0; i < len; i++) {
          itemsCopy[i] = items[i];
        }

        // good
        itemsCopy = items.slice();

                          // The slice() method returns a shallow copy of
                             a portion of an array into a new array object.

    To convert an array-like object to an array, use Array#slice.

        function trigger() {
          var args = Array.prototype.slice.call(arguments);
          ...
        }

        //  ????

String

    Use single quotes '' for strings.// good

        var fullName = 'Bob ' + this.lastName;

    Strings longer than 100 characters should be written across multiple lines using string concatenation.
    Note: If overused, long strings with concatenation could impact performance.

        // bad
        var errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';

        // bad
        var errorMessage = 'This is a super long error that was thrown because \
        of Batman. When you stop to think about how Batman had anything to do \
        with this, you would get nowhere \
        fast.';

        // good
        var errorMessage = 'This is a super long error that was thrown because ' +
          'of Batman. When you stop to think about how Batman had anything to do ' +
          'with this, you would get nowhere fast.';


    When programmatically building up a string, use Array#join instead of string concatenation.

        var items;
        var messages;
        var length;
        var i;

        messages = [{
          state: 'success',
          message: 'This one worked.'
        }, {
          state: 'success',
          message: 'This one worked as well.'
        }, {
          state: 'error',
          message: 'This one did not work.'
        }];

        length = messages.length;

        // bad
        function inbox(messages) {
          items = '<ul>';

          for (i = 0; i < length; i++) {
            items += '<li>' + messages[i].message + '</li>';
          }

          return items + '</ul>';
        }

        // good
        function inbox(messages) {
          items = [];

          for (i = 0; i < length; i++) {
            // use direct assignment in this case because we're micro-optimizing.
            items[i] = '<li>' + messages[i].message + '</li>';
          }

          return '<ul>' + items.join('') + '</ul>';
        }

        // .join(): The join() method joins the elements of an array into a string, and returns the string.

              ex)
                 var fruits = ["Banana", "Orange", "Apple", "Mango"];
                 var energy = fruits.join(" and ");
                 // result: Banana and Orange and Apple and Mango

Functions

    Function expressions:

        // anonymous function expression
        var anonymous = function() {
          return true;
        };

        // named function expression
        var named = function named() {
          return true;
        };

        // immediately-invoked function expression (IIFE)
        (function() {
          console.log('Welcome to the Internet. Please follow me.');
        })();

    Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead.
    Browsers will allow you to do it, but they all interpret it differently, which is bad news bears.

    // Note: ECMA-262 defines a block as a list of statements. A function declaration is not a statement.

        // bad
        if (currentUser) {
          function test() {
            console.log('Nope.');
          }
        }

        // good
        var test;
        if (currentUser) {
          test = function test() {
            console.log('Yup.');
          };
        }

    Never name a parameter arguments.
    This will take precedence over the arguments object that is given to every function scope.

        // bad
        function nope(name, options, arguments) {
          // ...stuff...
        }

        // good
        function yup(name, options, args) {
          // ...stuff...
        }

Properties

    Use dot notation when accessing properties.

        var luke = {
          jedi: true,
          age: 28
        };

        // bad
        var isJedi = luke['jedi'];

        // good
        var isJedi = luke.jedi;

    Use subscript notation [] when accessing properties with a variable.
    ********* I did not understand this part **********

        var luke = {
          jedi: true,
          age: 28
        };

        function getProp(prop) {
          return luke[prop];
        }

        var isJedi = getProp('jedi');

Variables

    Always use var to declare variables. Not doing so will result in global variables.
    We want to avoid polluting the global namespace. Captain Planet warned us of that.

        // bad
        superPower = new SuperPower();

        // good
        var superPower = new SuperPower();

    Use one var declaration per variable. It's easier to add new variable declarations this way,
    and you never have to worry about swapping out a ; for a , or introducing punctuation-only diffs.

        // bad
        var items = getItems(),
            goSportsTeam = true,
            dragonball = 'z';

        // bad
        // (compare to above, and try to spot the mistake)
        var items = getItems(),
            goSportsTeam = true;
            dragonball = 'z';

        // good
        var items = getItems();
        var goSportsTeam = true;
        var dragonball = 'z';

    Declare unassigned variables last. This is helpful when later on you might need to assign a variable
    depending on one of the previous assigned variables.

        // bad
        var i, len, dragonball,
            items = getItems(),
            goSportsTeam = true;

        // bad
        var i;
        var items = getItems();
        var dragonball;
        var goSportsTeam = true;
        var len;

        // good
        var items = getItems();
        var goSportsTeam = true;
        var dragonball;
        var length;
        var i;

    Assign variables ***** at the top of their scope.******
    This helps avoid issues with variable declaration and assignment hoisting related issues

        // bad
        function() {
          test();
          console.log('doing stuff..');

          //..other stuff..

          var name = getName();

          if (name === 'test') {
            return false;
          }

          return name;
        }

        // good
        function() {
          var name = getName();

          test();
          console.log('doing stuff..');

          //..other stuff..

          if (name === 'test') {
            return false;
          }

          return name;
        }

        // bad - unnecessary function call
        function() {
          var name = getName();

          if (!arguments.length) {
            return false;
          }

          this.setFirstName(name);

          return true;
        }

        // good
        function() {
          var name;

          if (!arguments.length) {
            return false;
          }

          name = getName();
          this.setFirstName(name);

          return true;
        }

Hoisting

    Variable declarations get hoisted to the top of their scope, but their assignment does not.

        // we know this wouldn't work (assuming there
        // is no notDefined global variable)
        function example() {
          console.log(notDefined); // => throws a ReferenceError
        }

        // creating a variable declaration after you
        // reference the variable will work due to
        // variable hoisting. Note: the assignment
        // value of `true` is not hoisted.
        function example() {
          console.log(declaredButNotAssigned); // => undefined
          var declaredButNotAssigned = true;
        }

        // The interpreter is hoisting the variable
        // declaration to the top of the scope,
        // which means our example could be rewritten as:
        function example() {
          var declaredButNotAssigned;
          console.log(declaredButNotAssigned); // => undefined
          declaredButNotAssigned = true;
        }

    Anonymous function expressions hoist their variable name, but not the function assignment.

        function example() {
          console.log(anonymous); // => undefined

          anonymous(); // => TypeError anonymous is not a function

          var anonymous = function() {
            console.log('anonymous function expression');
          };
        }

    Named function expressions hoist the variable name, not the function name or the function body.

        function example() {
          console.log(named); // => undefined

          named(); // => TypeError named is not a function

          superPower(); // => ReferenceError superPower is not defined

          var named = function superPower() {
            console.log('Flying');
          };
        }

        // the same is true when the function name
        // is the same as the variable name.
        function example() {
          console.log(named); // => undefined

          named(); // => TypeError named is not a function

          var named = function named() {
            console.log('named');
          }
        }

    Function declarations hoist their name and the function body.

        function example() {
          superPower(); // => Flying

          function superPower() {
            console.log('Flying');
          }
        }

Comparison Operators & Equality


