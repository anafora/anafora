Module 1 - Try...Catch

    Error Handling in Javascript

        when you know your code will fail in some browsers
            ex) ajax call.

        >> requires different codes for different browsers.
           // you need to have a way to write both versions of the code without creating
              an error that forces the page to fail.

              >> 'Try and Catch' block is what we need to use for this.


        Try and Catch block:
            ex)
               try{
                 //put the code here that you want to attempt
                 //this code may generate an error
               }catch( err ){
                 //if an error happens then this code will run
                 //The err object will contain four properties - name, message, pageNumber, and lineNumber.
                 //The name property tells you which of the seven types of errors occurred.
                 //The message property tells you what the problem was.
                 //the pageNumber and lineNumber properties tell you the file name and line number which threw the error.
               }


            // when an error occurs, it is said to be thrown.

            ex) codepen example - http://codepen.io/mad-d/pen/Jobery/?editors=101

                document.addEventListener("DOMContentLoaded", function(){

                  //first try catch block
                  //try to call a non-existent method from the document object

                  try{

                    //code that you want to try goes here.
                    //try to buy me a beer

                    document.buyMeABeer();

                  }catch(err){
                    console.log("************************************");

                    //if the attempted code failed
                    //then this code will run.
                    //The err object inside the catch( ) will contain the name and message of the error.
                    //It will also hold the fileNumber and lineNumber
                    //those will tell you where the error occurred.

                    console.log("Error name: ", err.name );
                    console.log("Error message: ", err.message );

                  }

                  try{
                    var myCriticalError = new Error('I have no money to buy beer');
                    throw myCriticalError;
                  }catch(err){
                    console.log("************************************");
                    console.log("Error name: ", err.name );
                    console.log("Error message: ", err.message );
                  }finally{
                    //this code will run whether or not an error was thrown in the try block
                    console.log("************************************");
                  }

                  //create a new error.
                  throw new Error('This is my custom error message');
                  /**************************************
                  The name will be "Error".
                  The message will be 'This is my custom error message'
                  Look in the console to see this one.
                  Throwing an error outside a try catch block will cause the
                    page to fail and stop running the rest of the Javascript.
                  **********************************/
                })

                // NOTE: throwing an error outside a try catch block will cause the
                         page to fail and stop running the rest of the Javascript.


            Error Types

                Error:
                      generic error from which all other error types are created

                SyntaxError:
                      mistake in how your code is written

                ReferenceError:
                      tried to reference a variable that is not declared.

                TypeError:
                      an unexpected data-type that cannot be converted to something useful for the current context

                RangeError:
                      number not in acceptable range.

                URIError:
                      URI methods used incorrectly

                EvalError:
                      eval function used incorrectly

            Finally - the third clause that can be added to the Try Catch block.

                ex)
                   try{
                     //code you are attempting goes here
                   }catch( err ){
                     //code that runs if an error is thrown goes here
                   }finally{
                     //this code runs regardless of whether or not the error is thrown.
                   }

            Throwing Errors - to make your own code that throw an error

                ex)
                   var myError = new Error("This is my error message");
                   throw myError;

                the throw command will throw an error. if written outside of a try catch block, then the error will be
                thrown and the page will stop running javascript. this happens when the code does not handle its own
                errors.

            Error Event Handling
                adding an event listener for the onerror event can be an alternative way to handle all errors.

                ex)
                   window.onerror = function(msg, url, line){
                     //msg is the error message
                     //url is the page where the error occurred
                     //line is the line number where the error occurred
                     return true;
                   }

                   // any code can be addede inside of the error handling function.
                      "return true;" must be added at the end. >> this will stop the error being thrown to the browser,
                                                                  which will kill all the other scripts running on the
                                                                  page.

                      ex)
                         document.addEventListener("DOMContentLoaded", function(){

                           //now let's listen for an error...
                           //window.addEventListener("error", goneWrong);
                           //above is the preferred method but it doesn't work consistently

                           window.onerror = function(msg, page, line){

                             //put something in the output div

                             document.getElementById("output").innerHTML += "error Event triggered: " + msg;

                             //returning true will prevent the error from stopping the scripts in the browser.

                             return true;
                           }

                          try{
                             //instead of using the try catch block we will use an onerror event listener

                             throw new Error("Let's see what happens");
                           }catch(err){
                             //catch the thrown error
                             document.getElementById("output").innerHTML += "Caught thrown error: " + err.message;
                           }

                         });

Module 2 - Chrome Toggle Device Mode

    the interface testing in Chrome: for some visual testing of your mobile web app or hybrid app.

        small icon that looks like a mobile phone > Device Mode.

        Device Mode:
            User Agent String
            Viewport Sizing
            DevicePixelRatio
            Text Auto-sizing
            Mobile Scroll Bars
            Touch Events
            Touch Emulation

            https://www.youtube.com/watch?v=FrAZWiMWRa4













