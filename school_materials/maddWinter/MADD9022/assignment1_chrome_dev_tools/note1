
Chrome Developers Tool

    Features
        Edit page elements and styles in real time
        Debug Javascript
        Optimize with profilers



1 - Elements: working with DOMs

    Elements panel
        left side: html elements
            right click > inspect element >> highlighting the specific element in the element tree.
            magnifier > elements in the web >>


            double click > change the text >> you can change the element dynamically
            right click > edit HTML >> you can change html elements
            drag elements on the elements >> it changes the position of the elements.

2. Elements: styles view

        right side: styles view
            -display css rules for active element
            -enable/disable properties
            -edit rules for pseudo-classes
            -link directly to css source

            check boxes: you can disable the properties
            erasing values or properties: you can get rid of them in the effect of css
            >> this is very powerful for debugging

            + sign: add styles
            next to + sign: you can select the status of an element and manipulate its styles.
                            ex) :active, :hover, :focus, :visited things like this

            click the color box > color swatch, you can select the color without writing the color

3. Sources: edit files directly

   Sources Panel
       - modify application source files
       - export changes
       - track file versions

       clicking the file name in the left side will open the source code of the file
       after changingn the code, command + S will save the code into the browswer file now the original file.
       revert button > that reverts all the changes

       right click > save as > overwrite the original file
       right click > Local Modifications >> in history section, it shows the changes made
                                         apply original content >> undo it.

4. Console: for javascript debugging
       - interact with your app's views and scripts
       - run javascript commands
       - view log output

       console.log(console) > console itself is a javascript object.
       console.assert(1 == 1); >> undefined
       console.assert(1 == 2); >> error
       console.warn("Watch out!"); >> you can create a warning using the console's warn method.

3.2 Examining exceptions

    if you click the file name, then the console will show you the line number of the error

3.3 Element Selector Shortcuts

    $('#idName') is a built-in function in the console. //jQuery or any library overwrites it.
    >> you can use $('#idName') instead of document.querySelector('idName')

    ex) $('#delete') >> it gives you an array. >> $('#delete')[0]

    inspect($('#delete')[0]): grab an element from a page and figure out where it is.
    $0: the last history of the DOM selection

    $0.remove(); >> it removes the DOM thing.

4.1 Debugging JavaScript
4.2 Pause on Exception

    an error occurred > how can we confirm where this error comes from?

    in the top right, there is a pause icon(circular)
    > paused >> when hovering each variable, you can see its value.

    minifying your javascript: will make it load more quickly in your browser,
    but it will also make it more difficult to debug >> {} icon at the bottom will make the code
    more readable.

    hit the pause button again > when the error happens, it will lead you to the part where the exception
    occurs.

    breakpoint clicked > it will pause on that line

    |> : resume button
    ->
    .  : step over button > steps over to the next line code.
    |
    v  : step into button > goes down to whatever function being called on that line.
    A
    |  : step out button >

4.3 Local Storage

    Resources > Local Storage
                              key : value


Find the list of events in the Local Storage section of the Resources panel. In the list of keys and values, change the "name" of the "Build Robot" event to "Build Death Ray".
// done
Now that we have updated the data in Local Storage, force the event list to refresh by calling the Calendar.displayToday() method from the console.
// in the console, Calendar.displayToday();

5.1 The Network Tab

Network

    - Resource info - size, type, etc
    - Server response details
    - Timeline of network requests

    Any given web page that you load is made up of a bunch of network requests; html, javascript, style sheets, images, ajax
        >> each of these network requests,
                the faster they happen, more responsive your web page is going to feel

    What Dev Tool provides?
     >> Timeline panel: helps you identify bottlenecks in these network requests

        in the console,
        Network tab
            // to see the network panel in action, call it up and refresh the browser

            columns // from left to right

                name: name of each resource
                method: http methods used to get it // GET, POST
                status: response status code // returns from the server. 304(Not Modified)
                                             // 304 Not Modified means that my browser has already downloaded this request before
                                                and it has a local or cached copy that it's going to load up instead of downloading it again
                                                // google it
                type: the file type of the response
                initiator: what initiated the request, in case we need to track that down later
                size: the size of the file
                time: how long it took
                timeline: shows when each resource was requested and when it finished downloading // over on the right side, like a little waterfall


    To reload all the resources: hold down the shift key and refresh.

        // will redownload everything
        // at the bottom, you can see how long it took to download all the resources.
        // in the status column, OK means that the resources were all downloaded

    When you're debugging the
    performance of your web page,

    you're going to want to disable
    the cache, and there's

    To disable the cache // for debugging the performance of your web page
        by going to the File menu and selecting New Incognito Window, which
    will not only use a fresh

    cache, but it also won't
    use any cookies

    49
    00:02:14,900 --> 00:02:17,300
    you may have stored.

    50
    00:02:17,300 --> 00:02:20,370
    You can also go down to the
    bottom right, click the gear

    51
    00:02:20,370 --> 00:02:23,360
    icon, and open up the
    DevTools Settings.

    52
    00:02:23,360 --> 00:02:28,460
    There, you can select the
    Disable Cache check box.

    53
    00:02:28,460 --> 00:02:30,350
    Now let's take a closer
    look at what's going

    54
    00:02:30,350 --> 00:02:32,530
    on over in our waterfall.

    55
    00:02:32,530 --> 00:02:35,650
    The translucent bar shows the
    latency of our request--

    56
    00:02:35,650 --> 00:02:39,320
    how long from the start of
    asking for a resource to the

    57
    00:02:39,320 --> 00:02:42,810
    start of when it begins
    transferring it back to us.

    58
    00:02:42,810 --> 00:02:45,450
    The solid part shows us when
    the browser started and

    59
    00:02:45,450 --> 00:02:47,600
    finished downloading
    that resource.

    60
    00:02:47,600 --> 00:02:49,630
    The endpoint is when
    all data from

    61
    00:02:49,630 --> 00:02:51,980
    that request was received.

    62
    00:02:51,980 --> 00:02:54,260
    You might be wondering what all
    the different colors mean.

    63
    00:02:54,260 --> 00:02:56,360
    Well, it's colored
    by the file type.

    64
    00:02:56,360 --> 00:02:59,010
    HTML is blue, up at
    the top there.

    65
    00:02:59,010 --> 00:03:00,660
    JavaScript is orange.

    66
    00:03:00,660 --> 00:03:04,850
    Style sheets are green,
    and images are purple.

    67
    00:03:04,850 --> 00:03:07,240
    The first request that we did on
    this page is obviously the

    68
    00:03:07,240 --> 00:03:11,490
    HTML page itself,
    the index.html.

    69
    00:03:11,490 --> 00:03:15,070
    And if you take a look at that
    Initiator column, you can see

    70
    00:03:15,070 --> 00:03:17,930
    that all of the other resources
    were pulled down

    71
    00:03:17,930 --> 00:03:22,230
    because we discovered them
    inside of the index.html.

    72
    00:03:22,230 --> 00:03:24,800
    And you can actually click on
    those, and it will bring you

    73
    00:03:24,800 --> 00:03:27,460
    to the line inside the
    index.html where it discovered

    74
    00:03:27,460 --> 00:03:29,710
    that it needed that resource.

    75
    00:03:29,710 --> 00:03:32,140
    If we look over at the
    waterfall, you can see that it

    76
    00:03:32,140 --> 00:03:33,960
    reflects exactly this--

    77
    00:03:33,960 --> 00:03:38,250
    the resources are only requested
    after the index.html

    78
    00:03:38,250 --> 00:03:39,390
    is downloaded.

    79
    00:03:39,390 --> 00:03:41,820
    The blue line at the end of the
    timeline represents when

    80
    00:03:41,820 --> 00:03:44,770
    the DOM content-loaded
    event fired.

    81
    00:03:44,770 --> 00:03:47,170
    This gets triggered when our
    browser is done parsing our

    82
    00:03:47,170 --> 00:03:50,810
    HTML file, but it still could
    be loading resources.

    83
    00:03:50,810 --> 00:03:53,300
    The red line signifies the load
    event or when all the

    84
    00:03:53,300 --> 00:03:55,340
    resources are done
    downloading.

    85
    00:03:55,340 --> 00:03:56,840
    Sometimes there's
    a notable delay

    86
    00:03:56,840 --> 00:03:59,120
    between those two events.

    87
    00:03:59,120 --> 00:04:01,690
    If we click on the file name of
    a resource, we can get more

    88
    00:04:01,690 --> 00:04:03,580
    information about
    that request.

    89
    00:04:03,580 --> 00:04:05,970
    We're shown all the headers sent
    along with the request

    90
    00:04:05,970 --> 00:04:07,400
    and the response.

    91
    00:04:07,400 --> 00:04:09,450
    This can be really useful if
    you want to make sure your

    92
    00:04:09,450 --> 00:04:12,050
    server has the correct
    cache settings.

    93
    00:04:12,050 --> 00:04:14,400
    You can also preview the
    resource contents here, which

    94
    00:04:14,400 --> 00:04:17,510
    for text files like HTML,
    JavaScripts, or style sheets

    95
    00:04:17,510 --> 00:04:20,209
    are just going to show
    you the contents.

    96
    00:04:20,209 --> 00:04:24,880
    For images and fonts, you'll
    get a visual preview.

    97
    00:04:24,880 --> 00:04:27,310
    Now it's time for you start
    playing with the Network panel

    98
    00:04:27,310 --> 00:04:28,560
    in the Challenges.
